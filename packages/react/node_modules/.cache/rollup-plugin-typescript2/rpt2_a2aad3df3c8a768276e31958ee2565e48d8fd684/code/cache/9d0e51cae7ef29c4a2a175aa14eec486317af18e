{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useMemo } from 'react';\r\nimport s from '@/input/styles/index.module.css';\r\nexport const Input = (props) => {\r\n    var _a;\r\n    const classes = useMemo(() => {\r\n        var _a, _b, _c, _d;\r\n        return {\r\n            wrapper: [s.inputWrapper, (_b = (_a = props === null || props === void 0 ? void 0 : props.classOverrides) === null || _a === void 0 ? void 0 : _a.wrapper) !== null && _b !== void 0 ? _b : ''].join(' '),\r\n            input: [s.input, (_d = (_c = props === null || props === void 0 ? void 0 : props.classOverrides) === null || _c === void 0 ? void 0 : _c.input) !== null && _d !== void 0 ? _d : ''].join(' ')\r\n        };\r\n    }, [props.classOverrides]);\r\n    return (_jsxs(\"div\", Object.assign({ style: props.style, className: classes.wrapper }, { children: [_jsx(\"input\", { ref: props.forwardedRef, \r\n                // Value\r\n                type: props.type, defaultValue: props.defaultValue, value: props.value, onChange: (event) => {\r\n                    var _a;\r\n                    (_a = props.setValue) === null || _a === void 0 ? void 0 : _a.call(props, event.currentTarget.value);\r\n                }, \r\n                // Event handlers\r\n                onBlur: props.onBlur, onFocus: props.onFocus, onKeyDown: props.onKeyDown, onKeyPress: props.onKeyPress, onKeyUp: props.onKeyUp, \r\n                // Properties\r\n                id: props.id, className: classes.input, readOnly: props.readOnly, disabled: props.disabled, placeholder: (_a = props.placeholder) !== null && _a !== void 0 ? _a : ' ', autoFocus: props.autoFocus, \"aria-label\": props['aria-label'], \"aria-labelledby\": props['aria-labelledby'], maxLength: props.maxLength, required: props.required }, void 0),\r\n            !props.placeholder && _jsx(\"label\", Object.assign({ className: s.label }, { children: props.label }), void 0)] }), void 0));\r\n};\r\n","references":["/Users/mtosity/projects/web-uikit/core/node_modules/@types/react/index.d.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/core/dist/types/input/index.d.ts","writeByteOrderMark":false,"text":"import React, { CSSProperties } from 'react';\r\nexport interface InputOverrides {\r\n    input?: string;\r\n    wrapper?: string;\r\n}\r\nexport interface InputProps {\r\n    type?: string;\r\n    defaultValue?: string | number;\r\n    forwardedRef?: React.ForwardedRef<HTMLInputElement>;\r\n    value?: string;\r\n    setValue?: (value: string) => void;\r\n    classOverrides?: InputOverrides;\r\n    id?: string;\r\n    disabled?: boolean;\r\n    readOnly?: boolean;\r\n    label?: string;\r\n    autoFocus?: boolean;\r\n    'aria-label'?: string;\r\n    'aria-labelledby'?: string;\r\n    maxLength?: number;\r\n    required?: boolean;\r\n    placeholder?: string;\r\n    onBlur?: React.FocusEventHandler<HTMLInputElement>;\r\n    onFocus?: React.FocusEventHandler<HTMLInputElement>;\r\n    onKeyPress?: React.KeyboardEventHandler<HTMLInputElement>;\r\n    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;\r\n    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;\r\n    onClick?: React.KeyboardEventHandler<HTMLInputElement>;\r\n    className?: string;\r\n    style?: CSSProperties;\r\n}\r\nexport declare const Input: React.FC<InputProps>;\r\n"}}
