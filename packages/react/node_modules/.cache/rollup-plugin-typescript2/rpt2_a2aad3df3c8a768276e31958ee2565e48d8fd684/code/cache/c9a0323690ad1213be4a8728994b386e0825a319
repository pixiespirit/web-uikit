{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useEffect } from 'react';\r\nimport s from \"./styles/pincode.module.css\";\r\nimport { KeyCodeEnum, SizePinCode } from \"./types\";\r\nimport classnames from 'classnames';\r\nimport MultiRef from 'react-multi-ref';\r\nexport const PinCode = (props) => {\r\n    const { values, setValues, size, error, errorMessage, autofocus } = props;\r\n    const _inputRefs = new MultiRef();\r\n    const isNumberKeyCode = (keyCode) => {\r\n        return keyCode.includes(KeyCodeEnum.DIGIT_INDICATOR); // ex: 1='Digit1' and KeyCodeEnum.DIGIT='Digit'\r\n    };\r\n    const isNumberString = (str) => {\r\n        return str.match(/^-?\\d+$/);\r\n    };\r\n    const setInputValue = (value, inputIndex) => {\r\n        setValues(values.map((v, i) => {\r\n            if (i === inputIndex) {\r\n                return value;\r\n            }\r\n            return v;\r\n        }));\r\n    };\r\n    const handleOnChange = (text, inputIndex) => {\r\n        var _a, _b, _c;\r\n        if (text.length <= 2 && isNumberString(text)) {\r\n            // new number or replace number\r\n            if (inputIndex + 1 < values.length) {\r\n                (_a = _inputRefs.map.get(inputIndex + 1)) === null || _a === void 0 ? void 0 : _a.focus();\r\n            }\r\n        }\r\n        else if (text.length === values.length && values[inputIndex] === '') {\r\n            // paste same length empty input\r\n            setValues(text.split(''));\r\n            (_b = _inputRefs.map.get(values.length - 1)) === null || _b === void 0 ? void 0 : _b.focus();\r\n        }\r\n        else if (text.length === values.length + 1 && values[inputIndex] !== '') {\r\n            // paste same length but input not empty\r\n            setValues(text.slice(0, values.length).split(''));\r\n            (_c = _inputRefs.map.get(values.length - 1)) === null || _c === void 0 ? void 0 : _c.focus();\r\n        }\r\n    };\r\n    const handleKeyDown = (e, inputIndex) => {\r\n        var _a;\r\n        let keyCode = e.code;\r\n        if (keyCode === KeyCodeEnum.BACKSPACE) {\r\n            if (values[inputIndex] === '') {\r\n                setInputValue('', inputIndex - 1);\r\n                if (inputIndex - 1 >= 0) {\r\n                    (_a = _inputRefs.map.get(inputIndex - 1)) === null || _a === void 0 ? void 0 : _a.focus();\r\n                }\r\n            }\r\n            else {\r\n                setInputValue('', inputIndex);\r\n            }\r\n        }\r\n        else if (isNumberKeyCode(keyCode)) {\r\n            // if hit number then update the input\r\n            const digitChar = keyCode[keyCode.length - 1];\r\n            setInputValue(digitChar, inputIndex);\r\n        }\r\n    };\r\n    const handlePaste = (inputIndex) => {\r\n        var _a;\r\n        // move cursor to the start of the input for onChange paste\r\n        (_a = _inputRefs.map.get(inputIndex)) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, 0);\r\n    };\r\n    useEffect(() => {\r\n        var _a, _b;\r\n        // parse to correct init values\r\n        const newValues = values.map((v) => isNumberString(v) && v.length === 1 ? v : '');\r\n        setValues(newValues);\r\n        // auto focus\r\n        if (autofocus && newValues.length > 0) {\r\n            let didFocus = false;\r\n            for (let i = 0; i < newValues.length; i++) {\r\n                if (newValues[i] === '') {\r\n                    (_a = _inputRefs.map.get(i)) === null || _a === void 0 ? void 0 : _a.focus();\r\n                    didFocus = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!didFocus) {\r\n                // focus end if all inputs filled\r\n                (_b = _inputRefs.map.get(newValues.length - 1)) === null || _b === void 0 ? void 0 : _b.focus();\r\n            }\r\n        }\r\n        // just want to run once when comp mounted, so disable exhaustive-deps\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return (_jsx(\"div\", Object.assign({ className: s.pinCodeContainer }, { children: _jsxs(\"div\", { children: [_jsx(\"div\", Object.assign({ className: s.pinCodeWrapper }, { children: values.map((value, i) => {\r\n                        return (_jsx(\"input\", { value: value, onChange: (e) => handleOnChange(e.currentTarget.value, i), className: classnames(s.input, error && s.inputError, s[size || SizePinCode.DEFAULT]), type: \"text\", ref: _inputRefs.ref(i), onKeyDown: (e) => handleKeyDown(e, i), inputMode: \"numeric\", autoComplete: \"one-time-code\", onPaste: () => handlePaste(i), required: true }, `pin-code-${i}`));\r\n                    }) }), void 0),\r\n                _jsx(\"p\", Object.assign({ className: classnames(s.errorMessage, !error && s.errorHidden) }, { children: errorMessage }), void 0)] }, void 0) }), void 0));\r\n};\r\nexport * from \"./types\";\r\n","references":["/Users/mtosity/projects/web-uikit/core/node_modules/@types/react/index.d.ts","/Users/mtosity/projects/web-uikit/core/src/pin-code/types.ts","/Users/mtosity/projects/web-uikit/core/node_modules/classnames/index.d.ts","/Users/mtosity/projects/web-uikit/core/node_modules/react-multi-ref/index.d.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/core/dist/types/pin-code/index.d.ts","writeByteOrderMark":false,"text":"import React, { CSSProperties } from 'react';\r\nimport { SizePinCode } from \"./types\";\r\nexport interface PinCodeProps {\r\n    disabled?: boolean;\r\n    error?: boolean;\r\n    errorMessage?: string;\r\n    autofocus?: boolean;\r\n    values: Array<string>;\r\n    setValues: (values: Array<string>) => void;\r\n    className?: string;\r\n    style?: CSSProperties;\r\n    size?: SizePinCode;\r\n}\r\nexport declare const PinCode: React.FC<PinCodeProps>;\r\nexport * from \"./types\";\r\n"}}
