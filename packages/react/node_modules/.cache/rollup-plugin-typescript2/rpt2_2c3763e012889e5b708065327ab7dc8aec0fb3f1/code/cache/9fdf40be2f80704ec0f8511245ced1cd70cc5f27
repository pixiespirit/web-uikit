{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport React, { useMemo, useState } from 'react';\r\nimport s from \"./styles/calendar.module.css\";\r\nimport { Label1 } from \"../typography/label\";\r\nimport { getAllDateOfMonth, includesDate, toCalendarMatrix } from \"./utils\";\r\nimport { ArrowUpOutline, ArrowDownOutline, ArrowLeftOutline, ArrowRightOutline } from '@pixiepkg/icon';\r\nimport { isBefore, isSameDate, toMonthString } from \"./date-utils\";\r\nconst getClass = (props) => {\r\n    var _a;\r\n    const classes = [s.wrapper];\r\n    if ((_a = props.classOverrides) === null || _a === void 0 ? void 0 : _a.container) {\r\n        classes.push(props.classOverrides.container);\r\n    }\r\n    return classes.join(' ');\r\n};\r\nconst getCellClass = (props, selectedDate, calendarDate) => {\r\n    var _a;\r\n    const classes = [s.cell];\r\n    if ((_a = props.classOverrides) === null || _a === void 0 ? void 0 : _a.calendarCell) {\r\n        classes.push(props.classOverrides.calendarCell);\r\n    }\r\n    if (props.disablePastDates && calendarDate) {\r\n        const today = new Date();\r\n        if (isBefore(today, calendarDate)) {\r\n            classes.push(s.disabled);\r\n        }\r\n    }\r\n    if (!!calendarDate && isSameDate(selectedDate, calendarDate)) {\r\n        classes.push(s.active);\r\n    }\r\n    return classes.join(' ');\r\n};\r\nexport const Calendar = (props) => {\r\n    var _a;\r\n    const selectedDate = useMemo(() => { var _a; return (_a = props.date) !== null && _a !== void 0 ? _a : new Date(); }, [props.date]);\r\n    const [collapse, setCollapse] = useState((_a = props.collapse) !== null && _a !== void 0 ? _a : false);\r\n    // timeController is using for switch calendar between months, years\r\n    const [timeController, setTimeController] = useState(new Date(selectedDate));\r\n    const calendar = useMemo(() => {\r\n        // TODO: Re-implement this function to only get week dates if collapse\r\n        const dates = getAllDateOfMonth(timeController);\r\n        const calendarMatrix = toCalendarMatrix(dates);\r\n        // TODO: Remove below code when the above feature was implemented\r\n        if (collapse) {\r\n            const selectedDateRowId = calendarMatrix.findIndex((row) => {\r\n                return row.some((date) => date && isSameDate(selectedDate, date));\r\n            });\r\n            // selectDateRowId will be -1 if can not found selected date in the\r\n            // calendar matrix, so that, it should be zero instead.\r\n            return [calendarMatrix[Math.max(selectedDateRowId, 0)]];\r\n        }\r\n        return calendarMatrix;\r\n    }, [timeController, collapse, selectedDate]);\r\n    const onGoToPreviousMonth = () => {\r\n        timeController.setMonth(timeController.getMonth() - 1);\r\n        setTimeController(new Date(timeController));\r\n    };\r\n    const onGoToNextMonth = () => {\r\n        timeController.setMonth(timeController.getMonth() + 1);\r\n        setTimeController(new Date(timeController));\r\n    };\r\n    const onCellClick = (cell) => {\r\n        var _a;\r\n        if (cell) {\r\n            (_a = props.setDate) === null || _a === void 0 ? void 0 : _a.call(props, cell);\r\n        }\r\n    };\r\n    return (_jsxs(\"div\", Object.assign({ className: getClass(props) }, { children: [_jsxs(\"div\", Object.assign({ className: s.dateSelector }, { children: [!collapse && (_jsx(\"div\", Object.assign({ className: \"cursor-pointer\", onClick: onGoToPreviousMonth }, { children: _jsx(ArrowLeftOutline, {}, void 0) }), void 0)),\r\n                    _jsx(\"div\", Object.assign({ className: \"w-2/3 text-center\" }, { children: _jsxs(Label1, Object.assign({ semiBold: true }, { children: [toMonthString(timeController.getMonth()), \" \", timeController.getFullYear()] }), void 0) }), void 0),\r\n                    !collapse && (_jsx(\"div\", Object.assign({ className: \"cursor-pointer\", onClick: onGoToNextMonth }, { children: _jsx(ArrowRightOutline, {}, void 0) }), void 0))] }), void 0),\r\n            _jsxs(\"div\", Object.assign({ className: s.header }, { children: [_jsx(\"div\", Object.assign({ className: s.cell }, { children: \"CN\" }), void 0),\r\n                    _jsx(\"div\", Object.assign({ className: s.cell }, { children: \"T2\" }), void 0),\r\n                    _jsx(\"div\", Object.assign({ className: s.cell }, { children: \"T3\" }), void 0),\r\n                    _jsx(\"div\", Object.assign({ className: s.cell }, { children: \"T4\" }), void 0),\r\n                    _jsx(\"div\", Object.assign({ className: s.cell }, { children: \"T5\" }), void 0),\r\n                    _jsx(\"div\", Object.assign({ className: s.cell }, { children: \"T6\" }), void 0),\r\n                    _jsx(\"div\", Object.assign({ className: s.cell }, { children: \"T7\" }), void 0)] }), void 0),\r\n            _jsx(\"div\", Object.assign({ className: s.body }, { children: calendar.map((row, rowIdx) => {\r\n                    return (_jsxs(React.Fragment, { children: [row.map((cell, cellIdx) => {\r\n                                return (_jsxs(\"div\", Object.assign({ className: getCellClass(props, selectedDate, cell), onClick: () => onCellClick(cell) }, { children: [cell && cell.getDate(),\r\n                                        cell && includesDate(props.highlightDates, cell) && (_jsx(\"span\", { className: s.badge }, void 0))] }), rowIdx * 10 + cellIdx));\r\n                            }),\r\n                            _jsx(\"div\", { className: s.break }, void 0)] }, rowIdx));\r\n                }) }), void 0),\r\n            props.showCollapseButton && (_jsx(\"div\", Object.assign({ className: s.collapseContainer }, { children: _jsxs(\"div\", Object.assign({ className: s.collapseButton, onClick: () => setCollapse(!collapse) }, { children: [collapse && _jsx(ArrowDownOutline, {}, void 0),\r\n                        !collapse && _jsx(ArrowUpOutline, {}, void 0)] }), void 0) }), void 0))] }), void 0));\r\n};\r\n","references":["/Users/mtosity/projects/web-uikit/core/node_modules/@types/react/index.d.ts","/Users/mtosity/projects/web-uikit/core/src/typography/label.tsx","/Users/mtosity/projects/web-uikit/core/src/calendar/utils.ts","/Users/mtosity/projects/web-uikit/core/node_modules/@pixiepkg/icon/types/index.d.ts","/Users/mtosity/projects/web-uikit/core/src/calendar/date-utils.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/core/dist/types/calendar/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nexport interface CalendarOverrides {\r\n    container?: string;\r\n    calendarCell?: string;\r\n}\r\nexport interface CalendarProps {\r\n    date?: Date;\r\n    setDate?: (value: Date) => void;\r\n    collapse?: boolean;\r\n    showCollapseButton?: boolean;\r\n    highlightDates?: Array<Date>;\r\n    disablePastDates?: boolean;\r\n    classOverrides?: CalendarOverrides;\r\n}\r\nexport declare const Calendar: React.FC<CalendarProps>;\r\n"}}
