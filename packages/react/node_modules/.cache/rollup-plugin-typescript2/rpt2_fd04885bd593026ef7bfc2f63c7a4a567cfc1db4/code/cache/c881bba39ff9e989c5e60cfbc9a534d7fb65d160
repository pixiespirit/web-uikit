{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport s from \"./styles/text.module.css\";\r\nconst getClass = (props) => {\r\n    const classes = [];\r\n    if (props.medium)\r\n        classes.push(s.medium);\r\n    if (props.semiBold)\r\n        classes.push(s.semiBold);\r\n    if (props.bold)\r\n        classes.push(s.bold);\r\n    if (props.extraBold)\r\n        classes.push(s.extraBold);\r\n    if (props.italic)\r\n        classes.push(s.italic);\r\n    if (props.underline)\r\n        classes.push(s.underline);\r\n    if (props.ellipsis)\r\n        classes.push(s.ellipsis);\r\n    if (props.className)\r\n        classes.push(props.className);\r\n    return classes.join(' ');\r\n};\r\nconst getStyles = (props) => {\r\n    const styles = {};\r\n    if (props.color) {\r\n        styles.color = props.color;\r\n    }\r\n    return styles;\r\n};\r\nconst textChildren = (props) => {\r\n    if (typeof props.children === 'string' && props.maxLength) {\r\n        const truncatedText = props.children.slice(0, Math.min(props.maxLength, props.children.length));\r\n        // TODO: What if the end of the `truncatedText` is a space?\r\n        return `${truncatedText}...`;\r\n    }\r\n    return props.children;\r\n};\r\nexport const Text = (props) => {\r\n    const Tag = props.as;\r\n    return (_jsx(Tag, Object.assign({ style: getStyles(props), className: getClass(props) }, { children: textChildren(props) }), void 0));\r\n};\r\n","references":["/Users/mtosity/projects/web-uikit/node_modules/@types/react/index.d.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/packages/react/dist/types/typography/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nexport interface TextProps {\r\n    color?: string;\r\n    medium?: boolean;\r\n    bold?: boolean;\r\n    semiBold?: boolean;\r\n    extraBold?: boolean;\r\n    italic?: boolean;\r\n    underline?: boolean;\r\n    ellipsis?: boolean;\r\n    maxLength?: number;\r\n    className?: string;\r\n    as?: keyof JSX.IntrinsicElements;\r\n    children: React.ReactNode | string;\r\n}\r\nexport declare const Text: React.FC<TextProps>;\r\n"}}
