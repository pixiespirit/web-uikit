{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport React from 'react';\r\nimport { KindButton, SizeButton } from \"./types\";\r\nimport s from \"./styles/button.module.css\";\r\nimport primary from \"./styles/primary.module.css\";\r\nimport brand from \"./styles/brand.module.css\";\r\nimport secondary from \"./styles/secondary.module.css\";\r\nimport ghost from \"./styles/ghost.module.css\";\r\nimport { DivPx } from \"../div\";\r\nimport classNames from 'classnames';\r\nconst getClass = (props) => {\r\n    var _a;\r\n    /**\r\n     * Default button styles\r\n     */\r\n    const classes = [s.button];\r\n    const btnSize = (_a = props.size) !== null && _a !== void 0 ? _a : SizeButton.MEDIUM;\r\n    classes.push(btnSize.root);\r\n    /**\r\n     * Button kind style\r\n     * Default: primary\r\n     */\r\n    switch (props.kind) {\r\n        case KindButton.SECONDARY:\r\n            classes.push(secondary.root);\r\n            break;\r\n        case KindButton.GHOST:\r\n            classes.push(ghost.root);\r\n            break;\r\n        case KindButton.BRAND:\r\n            classes.push(brand.root);\r\n            break;\r\n        case KindButton.PRIMARY:\r\n        default:\r\n            classes.push(primary.root);\r\n            break;\r\n    }\r\n    if (props.inline)\r\n        classes.push(s.inline);\r\n    if (props.fullWidth)\r\n        classes.push(s.fullWidth);\r\n    if (props.rounded)\r\n        classes.push(s.rounded);\r\n    if (props.className)\r\n        classes.push(props.className);\r\n    return classes.join(' ');\r\n};\r\nconst ButtonChildren = (props) => {\r\n    var _a;\r\n    const btnSize = (_a = props.size) !== null && _a !== void 0 ? _a : SizeButton.MEDIUM;\r\n    return (_jsxs(React.Fragment, { children: [props.leftIcon && _jsx(\"span\", Object.assign({ className: s.icon }, { children: props.leftIcon }), void 0), props.leftIcon && !props.stickIconAtPrefix && props.children && _jsx(DivPx, { size: btnSize.iconMargin }, void 0), props.children && (_jsx(\"span\", Object.assign({ className: classNames(s.text, props.stickIconAtPrefix && s.textGrow) }, { children: props.children }), void 0)), props.rightIcon && !props.stickIconAtPrefix && props.children && _jsx(DivPx, { size: btnSize.iconMargin }, void 0), props.rightIcon && _jsx(\"span\", Object.assign({ className: s.icon }, { children: props.rightIcon }), void 0)] }, void 0));\r\n};\r\nexport const Button = (props) => {\r\n    var _a;\r\n    const common = {\r\n        className: getClass(props),\r\n        ref: props.forwardedRef,\r\n        children: _jsx(ButtonChildren, Object.assign({}, props), void 0)\r\n    };\r\n    return (_jsx(\"button\", Object.assign({}, common, { style: props.style, onClick: props.onClick, onFocus: props.onFocus, onBlur: props.onBlur, disabled: props.disabled, type: (_a = props.type) !== null && _a !== void 0 ? _a : 'button' }), void 0));\r\n};\r\nexport * from \"./types\";\r\n","references":["/Users/mtosity/projects/web-uikit/node_modules/@types/react/index.d.ts","/Users/mtosity/projects/web-uikit/packages/react/src/button/types.ts","/Users/mtosity/projects/web-uikit/packages/react/src/div/index.tsx","/Users/mtosity/projects/web-uikit/node_modules/classnames/index.d.ts","/Users/mtosity/projects/web-uikit/packages/react/src/button/types.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/packages/react/dist/types/button/index.d.ts","writeByteOrderMark":false,"text":"import React, { CSSProperties } from 'react';\r\nimport { KindButton, SizeButtonType } from \"./types\";\r\nexport interface ButtonProps {\r\n    children?: React.ReactNode;\r\n    forwardedRef?: React.ForwardedRef<HTMLButtonElement | HTMLAnchorElement>;\r\n    type?: 'submit' | 'button' | 'reset';\r\n    disabled?: boolean;\r\n    onClick?: React.MouseEventHandler;\r\n    onFocus?: React.FocusEventHandler;\r\n    onBlur?: React.FocusEventHandler;\r\n    autoFocus?: boolean;\r\n    leftIcon?: React.ReactNode;\r\n    rightIcon?: React.ReactNode;\r\n    stickIconAtPrefix?: boolean;\r\n    kind?: KindButton;\r\n    rounded?: boolean;\r\n    size?: SizeButtonType;\r\n    inline?: boolean;\r\n    fullWidth?: boolean;\r\n    className?: string;\r\n    style?: CSSProperties;\r\n}\r\nexport declare const Button: React.FC<ButtonProps>;\r\nexport * from \"./types\";\r\n"}}
