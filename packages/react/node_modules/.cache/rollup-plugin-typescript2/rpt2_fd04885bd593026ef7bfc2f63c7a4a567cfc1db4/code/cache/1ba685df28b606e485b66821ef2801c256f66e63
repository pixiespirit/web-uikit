{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { cloneElement } from 'react';\r\nimport s from './index.module.css';\r\nimport { cx } from \"../../utils/dom\";\r\nimport { forwardRef } from 'react';\r\nimport { getValidChildren } from \"../../utils/getValidChildren\";\r\nexport const InputGroup = forwardRef((props, ref) => {\r\n    const _className = cx(s.wrapper, props.className);\r\n    const validChildren = getValidChildren(props.children);\r\n    const groupStyles = {};\r\n    validChildren.forEach((child) => {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\r\n        if (child.type.id === 'InputLeftIcon') {\r\n            const imageSize = (_h = (_d = (_c = (_b = (_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.props) === null || _c === void 0 ? void 0 : _c.size) !== null && _d !== void 0 ? _d : (_g = (_f = (_e = child === null || child === void 0 ? void 0 : child.props) === null || _e === void 0 ? void 0 : _e.children) === null || _f === void 0 ? void 0 : _f.props) === null || _g === void 0 ? void 0 : _g.width) !== null && _h !== void 0 ? _h : 16;\r\n            groupStyles.style = Object.assign({ paddingLeft: imageSize * 2 }, child.props.style);\r\n        }\r\n        if (child.type.id === 'InputRightIcon') {\r\n            const imageSize = (_r = (_m = (_l = (_k = (_j = child === null || child === void 0 ? void 0 : child.props) === null || _j === void 0 ? void 0 : _j.children) === null || _k === void 0 ? void 0 : _k.props) === null || _l === void 0 ? void 0 : _l.size) !== null && _m !== void 0 ? _m : (_q = (_p = (_o = child === null || child === void 0 ? void 0 : child.props) === null || _o === void 0 ? void 0 : _o.children) === null || _p === void 0 ? void 0 : _p.props) === null || _q === void 0 ? void 0 : _q.width) !== null && _r !== void 0 ? _r : 16;\r\n            groupStyles.style = Object.assign({ paddingRight: imageSize * 2 }, child.props.style);\r\n        }\r\n    });\r\n    const clones = validChildren.map((child) => {\r\n        return child.type.id !== 'Input'\r\n            ? cloneElement(child, child.props)\r\n            : cloneElement(child, Object.assign(Object.assign({}, groupStyles), child.props));\r\n    });\r\n    console.log(clones);\r\n    return (_jsx(\"div\", Object.assign({ className: _className, ref: ref }, { children: clones }), void 0));\r\n});\r\nInputGroup.id = 'InputGroup';\r\n","references":["/Users/mtosity/projects/web-uikit/node_modules/@types/react/index.d.ts","/Users/mtosity/projects/web-uikit/packages/react/src/utils/dom.ts","/Users/mtosity/projects/web-uikit/node_modules/@types/react/index.d.ts","/Users/mtosity/projects/web-uikit/packages/react/src/utils/getValidChildren.ts","/Users/mtosity/projects/web-uikit/packages/react/src/input/types.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/packages/react/dist/types/input/input-group/index.d.ts","writeByteOrderMark":false,"text":"import { HTMLAttributes } from 'react';\r\nimport { SFC } from \"../types\";\r\nexport interface InputGroupProps extends HTMLAttributes<HTMLDivElement> {\r\n    className?: string;\r\n}\r\nexport declare const InputGroup: SFC<InputGroupProps>;\r\n"}}
