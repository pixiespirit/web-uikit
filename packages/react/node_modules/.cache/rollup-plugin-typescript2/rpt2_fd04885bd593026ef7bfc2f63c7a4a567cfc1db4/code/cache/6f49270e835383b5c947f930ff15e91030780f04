{"code":"export function isElement(el) {\r\n    return el != null && typeof el == 'object' && 'nodeType' in el && el.nodeType === Node.ELEMENT_NODE;\r\n}\r\nexport function isHTMLElement(el) {\r\n    var _a;\r\n    if (!isElement(el)) {\r\n        return false;\r\n    }\r\n    const win = (_a = el.ownerDocument.defaultView) !== null && _a !== void 0 ? _a : window;\r\n    return el instanceof win.HTMLElement;\r\n}\r\nexport function getOwnerWindow(node) {\r\n    var _a, _b;\r\n    return isElement(node) ? (_b = (_a = getOwnerDocument(node)) === null || _a === void 0 ? void 0 : _a.defaultView) !== null && _b !== void 0 ? _b : window : window;\r\n}\r\nexport function getOwnerDocument(node) {\r\n    var _a;\r\n    return isElement(node) ? (_a = node.ownerDocument) !== null && _a !== void 0 ? _a : document : document;\r\n}\r\nexport function getEventWindow(event) {\r\n    var _a;\r\n    return ((_a = event.view) !== null && _a !== void 0 ? _a : window);\r\n}\r\nexport function canUseDOM() {\r\n    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\r\n}\r\nexport const isBrowser = canUseDOM();\r\nexport const dataAttr = (condition) => (condition ? '' : undefined);\r\nexport const ariaAttr = (condition) => (condition ? true : undefined);\r\nexport const cx = (...classNames) => classNames.filter(Boolean).join(' ');\r\nexport function getActiveElement(node) {\r\n    const doc = getOwnerDocument(node);\r\n    return doc === null || doc === void 0 ? void 0 : doc.activeElement;\r\n}\r\nexport function contains(parent, child) {\r\n    if (!parent)\r\n        return false;\r\n    return parent === child || parent.contains(child);\r\n}\r\nexport function addDomEvent(target, eventName, handler, options) {\r\n    target.addEventListener(eventName, handler, options);\r\n    return () => {\r\n        target.removeEventListener(eventName, handler, options);\r\n    };\r\n}\r\n/**\r\n * Get the normalized event key across all browsers\r\n * @param event keyboard event\r\n */\r\nexport function normalizeEventKey(event) {\r\n    const { key, keyCode } = event;\r\n    const isArrowKey = keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0;\r\n    const eventKey = isArrowKey ? `Arrow${key}` : key;\r\n    return eventKey;\r\n}\r\nexport function getRelatedTarget(event) {\r\n    var _a, _b, _c;\r\n    const target = ((_a = event.target) !== null && _a !== void 0 ? _a : event.currentTarget);\r\n    const activeElement = getActiveElement(target);\r\n    const originalTarget = event.nativeEvent.explicitOriginalTarget;\r\n    return ((_c = (_b = event.relatedTarget) !== null && _b !== void 0 ? _b : originalTarget) !== null && _c !== void 0 ? _c : activeElement);\r\n}\r\nexport function isRightClick(event) {\r\n    return event.button !== 0;\r\n}\r\n","references":["/Users/mtosity/projects/web-uikit/packages/react/src/utils/types.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/packages/react/dist/types/utils/dom.d.ts","writeByteOrderMark":false,"text":"import { Booleanish, EventKeys } from './types';\r\nexport declare function isElement(el: any): el is Element;\r\nexport declare function isHTMLElement(el: any): el is HTMLElement;\r\nexport declare function getOwnerWindow(node?: Element | null): typeof globalThis;\r\nexport declare function getOwnerDocument(node?: Element | null): Document;\r\nexport declare function getEventWindow(event: Event): typeof globalThis;\r\nexport declare function canUseDOM(): boolean;\r\nexport declare const isBrowser: boolean;\r\nexport declare const dataAttr: (condition: boolean | undefined) => Booleanish;\r\nexport declare const ariaAttr: (condition: boolean | undefined) => true | undefined;\r\nexport declare const cx: (...classNames: any[]) => string;\r\nexport declare function getActiveElement(node?: HTMLElement): HTMLElement;\r\nexport declare function contains(parent: HTMLElement | null, child: HTMLElement): boolean;\r\nexport declare function addDomEvent(target: EventTarget, eventName: string, handler: EventListener, options?: AddEventListenerOptions): () => void;\r\n/**\r\n * Get the normalized event key across all browsers\r\n * @param event keyboard event\r\n */\r\nexport declare function normalizeEventKey(event: Pick<KeyboardEvent, 'key' | 'keyCode'>): EventKeys;\r\nexport declare function getRelatedTarget(event: Pick<FocusEvent, 'relatedTarget' | 'target' | 'currentTarget'>): HTMLElement;\r\nexport declare function isRightClick(event: Pick<MouseEvent, 'button'>): boolean;\r\n"}}
