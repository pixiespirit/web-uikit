{"code":"import { __rest } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport classNames from 'classnames';\r\nimport { forwardRef } from 'react';\r\nimport styles from './styles/TextBox.module.css';\r\nconst InternalTextBox = (_a, ref) => {\r\n    var { className, size = 'medium', invalid, iconAfter, iconBefore, addonAfter, addonBefore, disabled } = _a, props = __rest(_a, [\"className\", \"size\", \"invalid\", \"iconAfter\", \"iconBefore\", \"addonAfter\", \"addonBefore\", \"disabled\"]);\r\n    return (_jsxs(\"div\", Object.assign({ className: classNames(styles.input, styles[size], {\r\n            [styles.invalid]: invalid,\r\n            [styles.disabled]: disabled\r\n        }) }, { children: [addonBefore && _jsx(\"div\", Object.assign({ className: classNames(styles.addonBefore, styles.addon) }, { children: addonBefore }), void 0),\r\n            iconBefore && _jsx(\"div\", Object.assign({ className: styles.iconBefore }, { children: iconBefore }), void 0),\r\n            _jsx(\"input\", Object.assign({ type: \"text\", ref: ref }, props, { disabled: disabled }), void 0),\r\n            iconAfter && _jsx(\"div\", Object.assign({ className: styles.iconAfter }, { children: iconAfter }), void 0),\r\n            addonAfter && _jsx(\"div\", Object.assign({ className: classNames(styles.addonAfter, styles.addon) }, { children: addonAfter }), void 0)] }), void 0));\r\n};\r\nexport const Textbox = forwardRef(InternalTextBox);\r\n","references":["/Users/mtosity/projects/web-uikit/core/node_modules/classnames/index.d.ts","/Users/mtosity/projects/web-uikit/core/node_modules/@types/react/index.d.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/core/dist/types/text-box/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nexport declare const Textbox: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLInputElement> & Partial<{\r\n    size: 'small' | 'medium' | 'large';\r\n    invalid: boolean;\r\n    addonBefore: JSX.Element | string;\r\n    addonAfter: JSX.Element | string;\r\n    iconBefore: JSX.Element | string;\r\n    iconAfter: JSX.Element | string;\r\n    disabled?: boolean | undefined;\r\n}> & React.RefAttributes<HTMLInputElement>>;\r\n"}}
