{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport classnames from 'classnames';\r\nimport React from 'react';\r\nimport styles from './styles/toggle.module.css';\r\nconst InternalToggle = (props, ref) => {\r\n    const _height = props.size === 'large' ? 24 : 16;\r\n    const _width = props.size === 'large' ? 42 : 28;\r\n    const _side = props.size === 'large' ? 20 : 12;\r\n    return (_jsxs(\"label\", Object.assign({ className: classnames(styles.toggle, {\r\n            [styles.checked]: props.checked,\r\n            [styles.disabled]: props.disabled\r\n        }) }, { children: [_jsx(\"span\", { style: Object.assign(Object.assign({}, props.style), { \r\n                    // @ts-ignore\r\n                    '--toggle-height': `${_height}px`, '--toggle-width': `${_width}px`, '--toggle-size': `${_side}px` }), className: classnames(styles.wrapper, props.className) }, void 0),\r\n            _jsx(\"span\", Object.assign({ className: styles.label }, { children: props.children }), void 0),\r\n            _jsx(\"input\", { ref: ref, id: props.id, disabled: props.disabled, name: props.name, type: \"checkbox\", checked: props.checked, onChange: (e) => {\r\n                    var _a, _b;\r\n                    (_a = props.onChecked) === null || _a === void 0 ? void 0 : _a.call(props, e.target.checked);\r\n                    (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, e);\r\n                } }, void 0)] }), void 0));\r\n};\r\nexport const Toggle = React.forwardRef(InternalToggle);\r\n","references":["/Users/mtosity/projects/web-uikit/core/node_modules/classnames/index.d.ts","/Users/mtosity/projects/web-uikit/core/node_modules/@types/react/index.d.ts"],"dts":{"name":"/Users/mtosity/projects/web-uikit/core/dist/types/toggle/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\ndeclare type ToggleProps = {\r\n    id?: string;\r\n    checked?: boolean;\r\n    style?: React.CSSProperties;\r\n    disabled?: boolean;\r\n    tabIndex?: number;\r\n    children?: React.ReactNode;\r\n    className?: string;\r\n    size?: 'small' | 'large';\r\n    name?: string;\r\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onChecked?: (checked: boolean) => void;\r\n};\r\nexport declare const Toggle: React.ForwardRefExoticComponent<ToggleProps & React.RefAttributes<HTMLInputElement>>;\r\nexport {};\r\n"}}
